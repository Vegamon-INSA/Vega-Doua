import javax.swing.*;
import java.awt.Color;
import java.awt.event.*;
import java.util.ArrayList;

public class FenetreCombat extends JFrame implements ActionListener{
	 
    private JPanel p1,p2,p3,p4,p5,p,pmap,lastmap,pmap1,pmap2,pmap3,pmap4,pmap5,pmap6,pmap7,pmap8,pmap9,pmap10,pmap11,pmap12,pmap13,pmap14,pmap15,pmap16, viePerso, vieAdv;
    private JLabel fond,l1,l2,l3,lab2,Meloche,gif;
    private JButton attaque, soin,fuite,a1,a2,a3,a4,annuler;
    private Timer t,t2, t3, t4;
    private boolean freeze,trefle,b;
    private VEGAMONS perso, advers, pA, pD;
    private int x, y, x1, y1,j,exp,type;
    private ArrayList<VEGAMONS> pokedex;
    
    public FenetreCombat(ArrayList<VEGAMONS> lePokedex, Jeu JFramePrincipal){
        
		freeze = false;
		trefle = true; //qd code de la map sera bon mettre a false
        pokedex=lePokedex;
        perso = pokedex.get(0);
        x=100;
        y=135;            // coordonnées des icons des pokemons
        x1=420;
        y1=30;
        
    
        ///INTERFACE COMBAT
        p1 = new JPanel();
        p1.setSize(600,300);
        p1.setLocation(0,0);
        p1.setBackground(Color.green); 
        p1.setLayout(null);
        JFramePrincipal.add(p1);
        
        p2 =new JPanel();
        p2.setBounds(0, 300, 600, 300);
        p2.setBackground(new Color(152, 143, 134));
        p2.setLayout(null);
        JFramePrincipal.add(p2);
        
        p3 = new JPanel();
        p3.setBounds(30,246,540,50);
        p3.setBackground(Color.white);
        p1.add(p3);
        
        p4 = new JPanel();
        p4.setBounds(29, 13, 271, 48);
        p4.setBackground(Color.white);
        p4.setLayout(null);
        p1.add(p4);
        
        p5 = new JPanel();
        p5.setBounds(306, 174, 271, 48);
        p5.setBackground(Color.white);
        p5.setLayout(null);
        p1.add(p5);
        
        fond = new JLabel(new ImageIcon("Images/interface.png")); 
        fond.setBounds(0,0,600,300);
        p1.add(fond);
        
        Meloche = new JLabel(new ImageIcon("Images/Meloche.png")); 
        Meloche.setBounds(x,y,80,100);
        fond.add(Meloche);
        
        gif = new JLabel(new ImageIcon("Images/pokexplo.gif")); 
        gif.setBounds(150,-80,600,300);
        fond.add(gif);
        gif.setVisible(false);
        
        l1= new JLabel("Que dois-je faire ?" );
        l1.setBounds(0,0,540,50);
        l1.setBackground(Color.red);
        p3.add(l1);
        
        l2 = new JLabel(" " );
        l2.setBounds(50,-10,268, 45);
        l2.setBackground(Color.white); 
        p4.add(l2);
        
        l3 = new JLabel(perso.nom + "     XP : " + perso.XP + "     PV : " + perso.PV);
        l3.setBounds(20,-10,268, 45);
        l3.setBackground(Color.white);
        p5.add(l3);
        
        attaque = new JButton("Attaque");
        attaque.setBounds(150, 330, 300, 100);
        attaque.setBackground(new Color(240, 34, 51));
        attaque.addActionListener(this);
        p2.add(attaque);
        
        soin = new JButton("Soin");
        soin.setBounds(150, 450, 130, 80);
        soin.setBackground(new Color(135, 211, 0));
        soin.addActionListener(this);
        p2.add(soin);
        
        fuite = new JButton("Fuite");
        fuite.setBounds(320, 450, 130, 80);
        fuite.setBackground(new Color (0, 196, 220));
        fuite.addActionListener(this);
        p2.add(fuite);

        p = new JPanel();
        p.setBounds(0, 300, 600, 300);
        p.setBackground(Color.gray); 
        p.setLayout(null);
        JFramePrincipal.add(p);
        
        a1 = new JButton("feu :  "+perso.attaque1.nom); 
        a1.setBounds(100, 330, 165, 50);
        a1.setBackground(new Color(240, 34, 51));
        a1.addActionListener(this);
        p.add(a1);
        
        a2 = new JButton("plante :  "+perso.attaque2.nom);
        a2.setBounds(335, 330, 165, 50);
        a2.setBackground(new Color(135, 211, 0));
        a2.addActionListener(this); 
        p.add(a2);
        
        a3 = new JButton("eau :  "+perso.attaque3.nom);
        a3.setBounds(100, 400, 165, 50);
        a3.setBackground(new Color (0, 196, 220));
        a3.addActionListener(this);
        p.add(a3);
        
        a4 = new JButton("elec :  "+perso.attaque4.nom);
        a4.setBounds(335, 400, 165, 50);
        a4.setBackground(new Color (250, 230, 0));
        a4.addActionListener(this);
        p.add(a4);
        
        annuler = new JButton("Annuler");
        annuler.setBounds(155, 475, 300, 50);
        annuler.setBackground(new Color (152, 143, 134));
        annuler.addActionListener(this); 
        p.add(annuler);
        
        viePerso = new JPanel();
        viePerso.setLocation(20, 33);
        viePerso.setSize((int)(230.0*(double)(perso.PV)/(double)(perso.PVmax)), 5);
        viePerso.setBackground(Color.green);
        p5.add(viePerso);
        
        vieAdv = new JPanel();
        vieAdv.setLocation(20, 33);
        vieAdv.setBackground(Color.green);
        p4.add(vieAdv);
        
        p.setVisible(false);
        if(trefle==true){
            p2.setVisible(true);
            System.out.println("i");
			p1.setVisible(true);
            debutCombat();
		}
		        JFramePrincipal.setVisible(true); 

	} 
    
    public void actionPerformed(ActionEvent e){
        /// COMBAT
        if (e.getSource()==attaque && !freeze){
            p2.setVisible(false);      //p2=attaque soin fuite
			p.setVisible(true);        //p= 1,2,3,4 annuler
        }
        
        boolean esquive;
        boolean fin=false;
        
        if (e.getSource()==a1 && !freeze){
            esquive = attaque(1);
            if (esquive==false && finCombat()==false){
                l1.setText(perso.nom+" attaque avec "+perso.attaque1.nom+" !");
                graphAttak(true);
            }else if (esquive==true && finCombat()==false){
               l1.setText(perso.nom+" attaque avec "+perso.attaque1.nom+" !           "+advers.nom+" esquive !");
            }
        }
        
        if (e.getSource()==a2 && !freeze){
            esquive = attaque(2);
            if (esquive==false && finCombat()==false){
                l1.setText(perso.nom+" attaque avec "+perso.attaque2.nom+" !");
                graphAttak(true);
            }else if (esquive==true && finCombat()==false){
               l1.setText(perso.nom+" attaque avec "+perso.attaque2.nom+" !           "+advers.nom+" esquive !");
            }
        }
        
        if (e.getSource()==a3 && !freeze){
            esquive = attaque(3);
            if (esquive==false && finCombat()==false){
                l1.setText(perso.nom+" attaque avec "+perso.attaque3.nom+" !"); 
                graphAttak(true);
            }else if (esquive==true && finCombat()==false){
               l1.setText(perso.nom+" attaque avec "+perso.attaque3.nom+" !           "+advers.nom+" esquive !");
            }
        }
        
        if (e.getSource()==a4 && !freeze){
            esquive = attaque(4);
            if (esquive==false && finCombat()==false){
                l1.setText(perso.nom+" attaque avec "+perso.attaque4.nom+" !");
                graphAttak(true);
            }else if (esquive==true && finCombat()==false){
               l1.setText(perso.nom+" attaque avec "+perso.attaque4.nom+" !           "+advers.nom+" esquive !");
            }
        }
        
        if (e.getSource()==t) { //b=true => a nous de jouer, b=false, on a deja choisi notre attaque
			if (b==true){
                t.stop();
                freeze=false;
                p.setVisible(false);
                p2.setVisible(true);
                l1.setText("Que dois-je faire ?");
                b=false;
            }else{
                fin=finCombat();
                if(advers.PV<=0){
                    t.stop();
                    l1.setText("Vous avez gagne !");
                    graphAttak(true);	
                    t2 = new Timer(2000, this);
                    t2.start();
                    freeze=true;
                    perso.XP=perso.XP + (int)(Math.pow(advers.XP, 0.64));
                    perso.PVmax = perso.PVmax+(int)(2.0+4*Math.log((double)(perso.XP*perso.XP)));
                    perso.PV = perso.PVmax;
				
                } else {
                    esquive=advattaque();
                    if (finCombat()==true){
                        l1.setText("Vous avez perdu !"); 
                        t2 = new Timer(1900, this);
                        t2.start();
                        freeze=true;
                    } else if (esquive==false){
                        l1.setText(advers.nom+" attaque avec "+advAtt()+" !");
                        graphAttak(false);
                        b=true;
                    }else{
                        l1.setText(advers.nom+" attaque avec "+advAtt()+" !           "+perso.nom+" esquive !");
                        b=true;
                    }
                }
            }
		}
        if (e.getSource()==annuler && !freeze){
            p.setVisible(false);
			p2.setVisible(true);
        }
        
        if (e.getSource()==fuite && !freeze){
            l1.setText("Vous prenez la fuite !");			
            t2 = new Timer(2000, this);
			t2.start();
			freeze=true;
        }
        if (e.getSource()==t2){
            p1.setVisible(false);
            p2.setVisible(false);
            lastmap.setVisible(true);
            if (perso.PV<=0){
                this.setVisible(false);  // à changer
            }
            freeze=false;
            t2.stop();
		}
        
        //if (e.getSource()==t3){      // graphisme attaques
            //if (y==20){
                //x=100;
                //y=135;
                //Meloche.setLocation(x,y);
                //t3.stop();
                //freeze=false;
            //}
			//x=x+3;                   // ne rentre pas dans ce timer
            //y=y-1;
            //Meloche.setLocation(x,y);
            //System.out.println(b);
            
		//}
        
        if (e.getSource()==t4){
            gif.setVisible(false);
            //freeze=false;
            t4.stop();
		}

        if (e.getSource()==soin && !freeze){
            soin();
            l1.setText(perso.nom+" se soigne !");
            t = new Timer(2000, this);
			t.start();
			freeze=true;
            p.setVisible(false);
			p2.setVisible(true);
        }
               
		///DEPLACEMENT
    }
    
    public boolean attaque (int j){
        boolean esquive = true;
        double prob = Math.random();
        if (prob > advers.esquive){
            int pts = (int)(1.5*(perso.attaque*coeff(j, advers)*(Math.pow(perso.XP, 0.35)))/advers.defense);
            advers.PV=advers.PV - pts;
            esquive = false;
            l2.setText(advers.nom + "     XP : " + advers.XP + "     PV : " + advers.PV);
            vieAdv.setSize((int)(230.0*(double)(advers.PV)/(double)(advers.PVmax)), 5);
        }
        t = new Timer(2000, this);
        t.start();
        freeze=true;
        p.setVisible(false);
        p2.setVisible(true);

        return esquive;
    }
    
    public boolean advattaque(){
        boolean esquive = true;
        double prob = Math.random();
        if (prob > perso.esquive){
            int pts = (int)(1.5*(advers.attaque*coeff(advers.attaque1.type, perso)*(Math.pow(advers.XP, 0.35)))/perso.defense);
            perso.PV=perso.PV - pts;                                   
            esquive = false;
            l3.setText(perso.nom + "     XP : " + perso.XP + "     PV : " + perso.PV);
            viePerso.setSize((int)(230.0*(double)(perso.PV)/(double)(perso.PVmax)), 5);
        }
        return esquive;
    }
    
    public String advAtt(){
        String str=" ";
        int i = (int)(4*Math.random());
        if (i==0){
            str=advers.attaque1.nom;
        } else if (i==1){
            str=advers.attaque2.nom;
        } else if (i==2){
            str=advers.attaque3.nom;
        } else if (i==3){
            str=advers.attaque4.nom;
        }
        return str;
    }
    
    public int coeff(int typeA , VEGAMONS pD){
        int typeD= pD.type;
        int [][] coef ={{6,6,9,6},{10,6,3,8},{4,8,7,6},{6,6,8,6}};
        return (coef[typeD-1][typeA-1]);
    }
    
    public void soin(){
        int soin=(int)(0.25*perso.PVmax);
        if(perso.PV+soin<perso.PVmax){
            perso.PV=perso.PV+soin;
        }else {
            perso.PV=perso.PVmax;
        }
        l3.setText(perso.nom + "     XP : " + perso.XP + "     PV : " + perso.PV);
        viePerso.setSize((int)(230.0*(double)(perso.PV)/(double)(perso.PVmax)), 5);
    }
    
    public void debutCombat(){
        b=false;
        int num = 1+((int)(5*Math.random()));
        int exp=1;
        if (lastmap==pmap3){
            exp=1+(int)(3*Math.random());
        }else if (lastmap==pmap4){
            exp=5+(int)(5*Math.random());
        }else if (lastmap==pmap8){         // à compléter avec toutes les map où il y a des trefles
            exp=11+(int)(8*Math.random());
        }else if (lastmap==pmap9){
            exp=21+(int)(13*Math.random());
        }else if (lastmap==pmap11){
            exp=50;        // 50=niveau du boss de l'arêne
        }
        advers = pokedex.get(num);
        if (num==1){
            lab2=new JLabel(new ImageIcon("Images/Aigloss.png"));
        }else if (num==2){
            lab2=new JLabel(new ImageIcon("Images/Murenss.png"));
        }else if (num==3){
            lab2=new JLabel(new ImageIcon("Images/Sunfure.png"));
        }else if (num==4){
            lab2=new JLabel(new ImageIcon("Images/Anemoniac.png"));
        }else if (num==5){
            lab2=new JLabel(new ImageIcon("Images/Pandalame.png"));
        }
        fond.add(lab2);
        lab2.setBounds(x1,y1,100,100);
        advers.XP = exp;
        advers.PVmax = advers.PVmax+(int)(Math.pow(exp, 1.2));
        advers.PV = advers.PVmax;
        l2.setText(advers.nom + "     XP : " + advers.XP + "     PV : " + advers.PV);
        vieAdv.setSize((int)(230.0*(double)(advers.PV)/(double)(advers.PVmax)), 5);
        
        if (advers.esquive>perso.esquive){ 
            t = new Timer(2000, this);
			t.start();
			freeze=true;
        }
	}
    
    public boolean finCombat(){
        boolean CombatFini = false;
        if(perso.PV<=0 || advers.PV<=0){
            CombatFini=true;
        } 
        return CombatFini;
    }
    
    public void graphAttak(boolean b2){ // b==true notre attaque / b==false attaque adverse
        if (b2==true){
            gif.setBounds(150,-80,600,300);
            gif.setVisible(true);
            t4 = new Timer(1000, this);
            //freeze=true;
            t4.start();
        }
        
        if (b2==false){
            gif.setBounds(-150,40,600,300);
            gif.setVisible(true);
            t4 = new Timer(1000, this);
            //freeze=true;
            t4.start();
        }
    }
    
    public static void pause(int ms) {
        try {
            Thread.sleep(ms);
        } catch (InterruptedException e){}
    }
}
